
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.mycompany.programming.lan.Gramatica;

import java.util.ArrayList;
import java.util.HashMap;
import com.mycompany.programming.lan.Gramatica.TablaLALR.*;
import java_cup.runtime.Symbol;
import com.mycompany.programming.lan.Gramatica.Errores.ErrorClass;
import com.mycompany.programming.lan.Gramatica.AFD.*;
import java.io.File;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\010\000\002\002" +
    "\003\000\002\021\005\000\002\023\007\000\002\023\006" +
    "\000\002\022\005\000\002\022\003\000\002\024\010\000" +
    "\002\024\007\000\002\025\005\000\002\025\003\000\002" +
    "\027\003\000\002\027\002\000\002\033\005\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\032\007" +
    "\000\002\032\006\000\002\036\004\000\002\036\003\000" +
    "\002\035\003\000\002\035\003\000\002\034\004\000\002" +
    "\034\002\000\002\034\004\000\002\040\005\000\002\040" +
    "\004\000\002\037\003\000\002\037\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\014\004\000\002\030\004\000\002\007\005\000\002" +
    "\007\003\000\002\011\003\000\002\011\002\000\002\010" +
    "\004\000\002\010\005\000\002\010\003\000\002\010\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\005\004\000\002\005\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\016\003\000\002\016\003\000\002\015" +
    "\005\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\014\003\012\022\014\025\005\026\004\027" +
    "\013\001\002\000\004\032\237\001\002\000\004\032\233" +
    "\001\002\000\004\002\232\001\002\000\004\034\231\001" +
    "\002\000\014\021\uffa6\022\014\025\005\026\004\027\013" +
    "\001\002\000\004\021\024\001\002\000\022\002\uffff\021" +
    "\uffa5\022\014\025\005\026\004\027\013\032\022\034\021" +
    "\001\002\000\004\032\017\001\002\000\004\032\015\001" +
    "\002\000\004\036\016\001\002\000\016\021\uff9f\022\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\034\uff9f\001\002\000\004\036" +
    "\020\001\002\000\016\021\uff9c\022\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\034\uff9c\001\002\000\014\021\uffa1\022\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\001\002\000\014\021\uffa0\022\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\001\002\000\014\021\uffa3\022" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\001\002\000\104\003\044" +
    "\004\027\005\065\006\041\007\034\010\050\011\067\012" +
    "\055\013\047\014\052\015\032\016\026\017\033\020\031" +
    "\021\035\022\051\023\037\024\042\025\053\026\061\027" +
    "\054\030\070\031\064\032\030\033\045\034\025\035\046" +
    "\036\043\037\066\040\056\041\036\043\040\044\063\001" +
    "\002\000\102\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\043\uffae" +
    "\044\uffae\001\002\000\102\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\001\002\000\102\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\043\uffc5\044\uffc5\001\002\000\102\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\001\002" +
    "\000\102\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044" +
    "\uffb9\001\002\000\102\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\001\002\000\102\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\043\uffba\044\uffba\001\002\000\102\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\001\002\000" +
    "\006\003\uffca\036\uffca\001\002\000\102\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\043\uffaa\044\uffaa\001\002\000\102\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\001\002" +
    "\000\102\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\001\002\000\102\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\001\002\000\102\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\043\uffb6\044\uffb6\001\002\000\102\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\001\002\000" +
    "\102\004\027\005\065\006\041\007\034\010\050\011\067" +
    "\012\055\013\047\014\052\015\032\016\026\017\033\020" +
    "\031\021\224\022\051\023\037\024\042\025\053\026\061" +
    "\027\054\030\070\031\064\032\030\033\045\034\025\035" +
    "\046\036\043\037\066\040\056\041\036\043\040\044\063" +
    "\001\002\000\102\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\001\002\000\102\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\043\uffad\044\uffad\001\002\000\102\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe\001\002\000\102" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\001" +
    "\002\000\102\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\044\uffb8\001\002\000\102\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\102\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\043\uffb5\044\uffb5\001\002\000\102\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\001\002" +
    "\000\102\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044" +
    "\uffbf\001\002\000\102\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\043\uffab\044\uffab\001\002\000\102\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\043\uffc6\044\uffc6\001\002\000\102\004\027" +
    "\005\065\006\041\007\034\010\050\011\067\012\055\013" +
    "\047\014\052\015\032\016\026\017\033\020\031\021\223" +
    "\022\051\023\037\024\042\025\053\026\061\027\054\030" +
    "\070\031\064\032\030\033\045\034\025\035\046\036\043" +
    "\037\066\040\056\041\036\043\040\044\063\001\002\000" +
    "\102\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\001\002\000\006\003\072\036\071\001\002\000\102\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\043\uffa7\044\uffa7\001\002" +
    "\000\102\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044" +
    "\uffb1\001\002\000\102\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\043\uffc4\044\uffc4\001\002\000\102\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\043\uffac\044\uffac\001\002\000\102\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\001\002\000" +
    "\102\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2" +
    "\001\002\000\004\020\221\001\002\000\006\034\217\036" +
    "\071\001\002\000\026\007\uffd9\010\174\012\200\015\177" +
    "\016\175\017\176\021\uffd9\034\uffd9\035\171\036\uffd9\001" +
    "\002\000\006\021\100\036\071\001\002\000\004\034\076" +
    "\001\002\000\006\021\uffe0\036\uffe0\001\002\000\004\034" +
    "\170\001\002\000\004\037\103\001\002\000\006\037\114" +
    "\040\115\001\002\000\004\002\000\001\002\000\006\036" +
    "\ufff4\042\105\001\002\000\004\036\106\001\002\000\004" +
    "\036\ufff5\001\002\000\006\033\ufffa\034\ufffa\001\002\000" +
    "\006\033\110\034\111\001\002\000\004\036\112\001\002" +
    "\000\006\037\ufffc\040\ufffc\001\002\000\006\033\ufffb\034" +
    "\ufffb\001\002\000\010\003\132\036\131\040\134\001\002" +
    "\000\006\036\ufff4\042\105\001\002\000\004\037\116\001" +
    "\002\000\006\036\ufff4\042\105\001\002\000\004\036\120" +
    "\001\002\000\006\033\ufff6\034\ufff6\001\002\000\006\033" +
    "\122\034\123\001\002\000\004\036\124\001\002\000\010" +
    "\003\ufff8\036\ufff8\040\ufff8\001\002\000\006\033\ufff7\034" +
    "\ufff7\001\002\000\004\036\106\001\002\000\006\033\110" +
    "\034\127\001\002\000\006\037\ufffd\040\ufffd\001\002\000" +
    "\006\002\ufffe\036\131\001\002\000\004\023\143\001\002" +
    "\000\010\002\ufff2\034\142\036\ufff2\001\002\000\004\034" +
    "\141\001\002\000\004\037\135\001\002\000\006\036\ufff4" +
    "\042\105\001\002\000\004\036\120\001\002\000\006\033" +
    "\122\034\140\001\002\000\010\003\ufff9\036\ufff9\040\ufff9" +
    "\001\002\000\006\002\ufff1\036\ufff1\001\002\000\006\002" +
    "\ufff0\036\ufff0\001\002\000\006\024\145\036\144\001\002" +
    "\000\016\003\uffeb\007\uffeb\024\uffeb\030\uffeb\034\uffeb\036" +
    "\uffeb\001\002\000\016\003\uffea\007\uffea\024\uffea\030\uffea" +
    "\034\uffea\036\uffea\001\002\000\016\003\uffec\007\uffec\024" +
    "\uffec\030\uffec\034\uffec\036\uffec\001\002\000\016\003\150" +
    "\007\uffe8\024\145\030\151\034\uffe8\036\144\001\002\000" +
    "\004\031\165\001\002\000\004\031\164\001\002\000\006" +
    "\007\155\034\uffee\001\002\000\016\003\uffed\007\uffed\024" +
    "\uffed\030\uffed\034\uffed\036\uffed\001\002\000\006\007\162" +
    "\034\uffef\001\002\000\016\003\150\007\uffe8\024\145\030" +
    "\151\034\uffe8\036\144\001\002\000\006\007\uffe5\034\uffe5" +
    "\001\002\000\006\007\uffe4\034\uffe4\001\002\000\016\003" +
    "\150\007\uffe8\024\145\030\151\034\uffe8\036\144\001\002" +
    "\000\006\007\uffe3\034\uffe3\001\002\000\016\003\150\007" +
    "\uffe8\024\145\030\151\034\uffe8\036\144\001\002\000\006" +
    "\007\uffe6\034\uffe6\001\002\000\006\007\uffe9\034\uffe9\001" +
    "\002\000\006\007\uffe7\034\uffe7\001\002\000\004\034\167" +
    "\001\002\000\006\002\ufff3\036\ufff3\001\002\000\006\021" +
    "\uffe2\036\uffe2\001\002\000\040\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\034\uffd1\035\uffd1\036\uffd1\001\002" +
    "\000\040\004\205\005\207\006\206\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\001\002\000\016\007\uffdb\011" +
    "\uffdb\013\uffdb\021\uffdb\034\uffdb\036\uffdb\001\002\000\022" +
    "\007\uffd9\010\174\011\uffd9\012\200\015\177\016\175\017" +
    "\176\035\171\001\002\000\040\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\021\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002" +
    "\000\040\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\001\002\000\040\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\021\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\001\002\000\022\007\uffd9\010\174\012\200\013\uffd9" +
    "\015\177\016\175\017\176\035\171\001\002\000\012\007" +
    "\210\021\uffde\034\uffde\036\uffde\001\002\000\032\007\uffda" +
    "\010\174\011\uffda\012\200\013\uffda\015\177\016\175\017" +
    "\176\021\uffda\034\uffda\035\171\036\uffda\001\002\000\040" +
    "\004\205\005\207\006\206\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\001\002\000\032\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\001\002\000\032\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\034\uffce\035\uffce\036\uffce\001\002\000\032\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\034\uffcc\035\uffcc\036\uffcc\001\002\000" +
    "\032\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\034\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\032\007\uffd9\010\174\011\uffd9\012\200\013\uffd9" +
    "\015\177\016\175\017\176\021\uffd9\034\uffd9\035\171\036" +
    "\uffd9\001\002\000\016\007\uffdc\011\uffdc\013\uffdc\021\uffdc" +
    "\034\uffdc\036\uffdc\001\002\000\006\007\210\013\213\001" +
    "\002\000\040\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\021" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\001\002\000\006\007\210" +
    "\011\215\001\002\000\040\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\034\uffcf\035\uffcf\036\uffcf\001\002\000" +
    "\032\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\034\uffd5\035\uffd5\036\uffd5\001" +
    "\002\000\006\021\uffdf\036\uffdf\001\002\000\006\021\uffe1" +
    "\036\uffe1\001\002\000\026\007\uffdd\010\uffdd\012\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\001\002\000\102\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\006\003\uffcb\036\uffcb\001\002" +
    "\000\006\003\uffc9\036\uffc9\001\002\000\102\004\027\005" +
    "\065\006\041\007\034\010\050\011\067\012\055\013\047" +
    "\014\052\015\032\016\026\017\033\020\031\021\226\022" +
    "\051\023\037\024\042\025\053\026\061\027\054\030\070" +
    "\031\064\032\030\033\045\034\025\035\046\036\043\037" +
    "\066\040\056\041\036\043\040\044\063\001\002\000\006" +
    "\003\uffc8\036\uffc8\001\002\000\004\034\230\001\002\000" +
    "\014\021\uffa4\022\uffa4\025\uffa4\026\uffa4\027\uffa4\001\002" +
    "\000\014\021\uffa2\022\uffa2\025\uffa2\026\uffa2\027\uffa2\001" +
    "\002\000\004\002\001\001\002\000\006\043\234\044\236" +
    "\001\002\000\016\021\uff9b\022\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\034\uff9b\001\002\000\016\021\uff9e\022\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\034\uff9e\001\002\000\016\021\uff9a\022" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\034\uff9a\001\002\000\004" +
    "\036\240\001\002\000\016\021\uff9d\022\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\034\uff9d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\012\002\005\015\007\016\010\020\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\226\001\001\000\002\001" +
    "\001\000\004\020\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\061\004\056\005\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\056" +
    "\005\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\221" +
    "\001\001\000\002\001\001\000\010\013\073\014\074\030" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\217\030\072\001\001" +
    "\000\012\007\200\010\201\011\172\012\171\001\001\000" +
    "\006\014\076\030\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\101\023\100\001" +
    "\001\000\004\024\112\001\001\000\002\001\001\000\004" +
    "\027\103\001\001\000\004\022\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\132\033" +
    "\127\001\001\000\004\027\124\001\001\000\002\001\001" +
    "\000\004\027\116\001\001\000\004\025\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\135\001\001\000\004\025\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\145\036\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\151\035\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\156\035\145\036\157\037\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\160\035\152\001\001\000\002\001\001\000\012\034\156" +
    "\035\145\036\157\037\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\215\001\001\000\002\001\001\000\012\007\213\010\201" +
    "\011\172\012\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\211\010\201\011\172" +
    "\012\171\001\001\000\002\001\001\000\004\012\202\001" +
    "\001\000\004\006\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\201\011\210\012\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public  Object [] getInfos(int num, String value){
       Object x[]={num,value};
       return x;
    }
   public  void chetCase(String s,int file,int columna,int opc){
       switch(opc){
          case 2:
          if(!s.equals(s.toUpperCase())){
            addError(1,file,columna,s,"Error, un no terminal debe estar en mayuscula");
          }
          break;
          case 1:
          if(!s.equals(s.toLowerCase())){
                addError(1,file,columna,s,"Error, un terminal debe estar en minuscula");
          }
          break;
       }
       
    }
     public Nodo getSPS(String e1,Nodo e){
       NodoDAD retorno=null;
      
       switch(e1){
         case "*":
            retorno=new NodoDAD("*",null,e,true);
            retorno.addNext(this.listadoDeNodos);
          break;
         case "?":
            retorno=new NodoDAD("|",null,e,true);
          break;
         case "+":
             retorno=new NodoDAD("+", null, e, e.isLambda());
             retorno.addNext(this.listadoDeNodos);
          break;
          }
          return retorno;
    }

    public Nodo getND(String e){
      String x[]=e.split("");
      int min=(x[1]).hashCode();
      int max=(x[3]).hashCode();
      return new NodoSPS(min,max,this.contador_____3);
    }
    
    public void addError(int opc,int fila,int columna,String token,String extra){
      listadoDeErrores.AddError(opc,fila,columna,token,extra);
    }
    public void addError(int opc,int fila,int columna,String token){
       listadoDeErrores.AddError(opc,fila,columna,token);
    }
   
      public String nameProgram="";
    private TablaDeProduccion inicio;
    private TablaDeTransiciones tablaLALR=null;
    private HashMap<String,TablaDeProduccion> tablaDeProducciones=new HashMap<>();
    private HashMap<String,String> tablaDeTerminales=new HashMap<>();
    private ArrayList<String> tablaDeExpresionesRegulares=new ArrayList();
    private ArrayList<Nodo> listadoDeNodos=new ArrayList();
    private int tipo_var=0;
    private int contador_____=0;
    private int contador_____2=0;
    private int contador_____3=0;
   
    public ErrorClass listadoDeErrores=new ErrorClass();
    public  void compararInfo( ArrayList <dato>list){
       for (int i = 0; i < list.size(); i++) {
                        dato a = list.get(i);
                        Object b[] = a.value;
                        int c = (int) b[0];
                        if(i!=list.size()-1){
                        for (int j = i+1; j < list.size(); j++) {
                            dato x = list.get(j);
                            Object y[] = x.value;
                            int z = (int) y[0];
                            
                            if(c==z){
                              //System.out.println("Se repite en fila: "+x.fila+"COL: "+x.columna +"con "+a.fila+" TK:"+b[1]);
                              addError(1,x.fila,x.columna,String.valueOf(b[1]),"Se repite con la fila: "+a.fila+" y columna "+a.columna);
      
                            }
                        }
                        }
                        
    }

 

    } 
     public void addExpresionReg(String dato,String regex,int fila,int columna){
      for(String d: tablaDeExpresionesRegulares){
         if(d.equals(dato)){
            addError(2,fila,columna,dato,"El token "+dato +" ya ha sido declarado");
            break;
         }
      }
      tablaDeExpresionesRegulares.add(dato);
   }
   private void create(String path, String autor, String extension, double version, ArrayList<generarAFD> e) {
         lenguaje lan=new lenguaje(this.nameProgram, autor, extension, version);
   this.tablaLALR=new TablaDeTransiciones(this.tablaDeProducciones,this.inicio);
   TablaLL1 tbl = new TablaLL1(this.tablaLALR, this.tablaDeTerminales, this.contador_____2);
   tbl.init(path,this.nameProgram);
   tbl.clean();
   tbl.saveDatas(lan, path, this.nameProgram+".bin");
   tbl.saveDatas(e, path, this.nameProgram+"_AFD.bin");
   
    }
    public void syntax_error(Symbol s){
       addError(1,s.left+1,s.right+1,s.value.toString());
      System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public static void error(Symbol s){
       //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    
  @Override
    public void unrecovered_syntax_error(Symbol s){
          addError(1,s.left+1,s.right+1,s.value.toString());
   
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= inicio SEPARATOR codJava regulares SEPARATOR gramatica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<dato> e1 = (ArrayList<dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<generarAFD> e = (ArrayList<generarAFD>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String extension="",autor="";
double version=0.0;
for(dato x: e1){
   switch (x.tipo()){
      case 1:
      this.parser.nameProgram=x.getValue();
      break;
      case 2:
       version=Double.valueOf(x.getValue());
      break;
      case 3:
      autor=x.getValue();
      break;
      case 4:
       extension=x.getValue();
      break;
   }
}

if(this.parser.listadoDeErrores.haveErrors() && !this.parser.nameProgram.isEmpty()){
   File f=new File("");
   String path=f.getAbsolutePath()+"/src/main/java/com/mycompany/programming/lan/Interfaz/repositorios/"+this.parser.nameProgram;
   f=new File(path);
   if(f.exists()){
      this.parser.create(path, autor, extension, version,e);
    }else{
   if(f.mkdir()){
       this.parser.create(path, autor, extension, version,e);
   }
   }
}else if(this.parser.nameProgram.isEmpty()){
    this.parser.addError(1, -1,-1, "El nombre no ha sido declarado", "Declarar el nombre del lenguaje");
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // gramatica ::= Term NoTerm A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramatica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Term ::= Term TERM H terminales PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Term ::= TERM H terminales PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // terminales ::= terminales COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
chetCase(e,eleft,eright,1);
if(this.parser.tablaDeTerminales.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"El terminal ya ha sido declarado");
}else{
this.parser.tablaDeTerminales.put(e,this.parser.contador_____+":"+e+":"+this.parser.tipo_var);
this.parser.contador_____++;
}
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // terminales ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
chetCase(e,eleft,eright,1);
if(this.parser.tablaDeTerminales.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"El terminal ya ha sido declarado");
}else{
this.parser.tablaDeTerminales.put(e,this.parser.contador_____+":"+e+":"+this.parser.tipo_var);
this.parser.contador_____++;
}
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminales",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NoTerm ::= NoTerm NO TERM H non_terminales PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NoTerm ::= NO TERM H non_terminales PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoTerm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // non_terminales ::= non_terminales COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
chetCase(e,eleft,eright,2);
if(this.parser.tablaDeProducciones.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"La produccion ya ha sido declarada");
}else{
this.parser.tablaDeProducciones.put(e,null);
this.parser.tablaDeTerminales.put(e,this.parser.contador_____+":"+e+":"+this.parser.tipo_var);
this.parser.contador_____++;
}
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminales",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // non_terminales ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
chetCase(e,eleft,eright,2);

if(this.parser.tablaDeProducciones.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"La produccion ya ha sido declarada");
}else{
this.parser.tablaDeProducciones.put(e,null);
this.parser.tablaDeTerminales.put(e,this.parser.contador_____+":"+e+":"+this.parser.tipo_var);
this.parser.contador_____++;
}
}catch(Exception ex){}



              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminales",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // H ::= TIPO_VAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
switch(e){
   case "cadena" :
   this.parser.tipo_var=1;
   break;
   case "entero" :
   this.parser.tipo_var=2;
   break;
   case "real" :
   this.parser.tipo_var=3;
   
   break;
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // H ::= 
            {
              Object RESULT =null;
		
this.parser.tipo_var=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // A ::= A G PNTCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaDeProduccion e = (TablaDeProduccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
try{
if(this.parser.tablaDeProducciones.containsKey(e.produccion)){
TablaDeProduccion href=this.parser.tablaDeProducciones.get(e.produccion);
if(href==null){
    this.parser.tablaDeProducciones.replace(e.produccion,e);
}else{
    for(Produccion x: e.listado){
    href.listado.add(x);
    }
}
}else{
  this.parser.addError(2,eleft,eright,e.produccion,"La produccion no ha sido declarada ");
}
}catch(Exception ex){

}



              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // A ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // A ::= G PNTCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaDeProduccion e = (TablaDeProduccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
try{
if(this.parser.tablaDeProducciones.containsKey(e.produccion)){
this.parser.inicio=e;
TablaDeProduccion href=this.parser.tablaDeProducciones.get(e.produccion);
if(href==null){
    this.parser.tablaDeProducciones.replace(e.produccion,e);
}else{
    for(Produccion x: e.listado){
    href.listado.add(x);
    }
}
}
}catch(Exception ex){

}




              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // A ::= error PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // G ::= ID BOTHPOINT B D E 
            {
              TablaDeProduccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<SymToken> e1 = (ArrayList<SymToken>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Produccion> e3 = (ArrayList<Produccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

Produccion tmp=new Produccion(e1,e2,this.parser.contador_____2);
e3.add(tmp);
try{
String vect[]=this.parser.tablaDeTerminales.get(e).split(":");
int x=Integer.valueOf(vect[vect.length-1]);
RESULT=new TablaDeProduccion(e3,e,x);
this.parser.contador_____2++;
}catch(Exception ex){
     this.parser.addError(2,eleft,eright,e,"La produccion no ha sido declarada ");
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // G ::= ID BOTHPOINT B D 
            {
              TablaDeProduccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SymToken> e1 = (ArrayList<SymToken>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

Produccion tmp=new Produccion(e1,e2,this.parser.contador_____2);
ArrayList<Produccion> list=new ArrayList();
list.add(tmp);
try{
String vect[]=this.parser.tablaDeTerminales.get(e).split(":");
int x=Integer.valueOf(vect[vect.length-1]);
RESULT=new TablaDeProduccion(list,e,x);
this.parser.contador_____2++;
}catch(Exception ex){
        this.parser.addError(2,eleft,eright,e,"La produccion no ha sido declarada ");
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // B ::= B C 
            {
              ArrayList<SymToken> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SymToken> list = (ArrayList<SymToken>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymToken simbolo = (SymToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
list.add(simbolo);
RESULT=list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // B ::= C 
            {
              ArrayList<SymToken> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymToken e = (SymToken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
ArrayList<SymToken> listado=new ArrayList();
listado.add(e);
RESULT=listado;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= ID 
            {
              SymToken RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if(e.equals(e.toLowerCase())){
if(!this.parser.tablaDeTerminales.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"El token terminal no ha sido declarado");
}
}else{
   if(!this.parser.tablaDeProducciones.containsKey(e)){
   this.parser.addError(2,eleft,eright,e,"La produccion no ha sido declarado");
}
}
RESULT=new SymToken(e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= EXT_ID 
            {
              SymToken RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String data[]=e.split(":");
int tipo=-1;
if(data[0].equals(data[0].toLowerCase())){
if(!this.parser.tablaDeTerminales.containsKey(data[0])){
   this.parser.addError(2,eleft,eright,e,"El token terminal no ha sido declarado");
}else{
    String vect[]=this.parser.tablaDeTerminales.get(data[0]).split(":");
    tipo=Integer.valueOf(vect[vect.length-1]);
}
}else{
   if(!this.parser.tablaDeProducciones.containsKey(data[0])){
   this.parser.addError(2,eleft,eright,e,"La produccion no ha sido declarado");
}else{
    String vect[]=this.parser.tablaDeTerminales.get(data[0]).split(":");
    tipo=Integer.valueOf(vect[vect.length-1]);    
   }
}
 RESULT=new SymToken(data[0],data[1],tipo);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= ABREKEY CIERRAKEY 
            {
              String RESULT =null;
		
RESULT="{}";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // D ::= 
            {
              String RESULT =null;
		
RESULT="";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D ::= error CIERRAKEY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E OR F 
            {
              ArrayList<Produccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Produccion> e = (ArrayList<Produccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Produccion e1 = (Produccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
e.add(e1);
RESULT=e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= OR F 
            {
              ArrayList<Produccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
ArrayList<Produccion> listado=new ArrayList();
listado.add(e);
RESULT=listado;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F ::= D 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=new Produccion(null,e,this.parser.contador_____2);
this.parser.contador_____2++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F ::= B D 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SymToken> e = (ArrayList<SymToken>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=new Produccion(e,e1,this.parser.contador_____2);
this.parser.contador_____2++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regulares ::= regulares reg PNTCOMA 
            {
              ArrayList<generarAFD> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<generarAFD> e = (ArrayList<generarAFD>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		generarAFD e1 = (generarAFD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
try{
e.add(e1);
RESULT=e;
}catch(Exception ex){}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("regulares",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regulares ::= error reg 
            {
              ArrayList<generarAFD> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regulares",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regulares ::= reg PNTCOMA 
            {
              ArrayList<generarAFD> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		generarAFD e = (generarAFD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
try{
ArrayList<generarAFD> listado=new ArrayList();
listado.add(e);
RESULT=listado;
}catch(Exception ex){}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("regulares",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // regulares ::= error PNTCOMA 
            {
              ArrayList<generarAFD> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regulares",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reg ::= X3 expr 
            {
              generarAFD RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
try{
NodoVal acept=new NodoVal(this.parser.contador_____3, "$");
this.parser.listadoDeNodos.add(acept);
NodoDAD tmp=new NodoDAD(".", e, acept, (e.isLambda() && acept.isLambda()));
tmp.addNext(this.parser.listadoDeNodos);
generarAFD x=new generarAFD(this.parser.listadoDeNodos,tmp,String.valueOf(e1));
x.init();
this.parser.listadoDeNodos=new ArrayList();
this.parser.contador_____3=0;

RESULT=x;
}catch(Exception ex){}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // X3 ::= ID IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 this.parser.addExpresionReg(e,"",eleft,eright);
 RESULT=e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr OR X1 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
if(e!=null && e2!=null){
RESULT=new NodoDAD("|",e,e2,(e.isLambda() || e2.isLambda()));
}else if(e==null && e2!=null){
RESULT=new NodoDAD("|",null,e2,true);
}else if(e!=null && e2==null){
 RESULT=new NodoDAD("|",e,null,true);
}  
}catch(Exception ex){}



              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= X1 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // X1 ::= values 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // X1 ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // values ::= values X2 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
NodoDAD x=new NodoDAD(".",e,e1,(e.isLambda() && e1.isLambda()));
x.addNext(this.parser.listadoDeNodos);
RESULT=x;
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // values ::= values X2 specials 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
Nodo x=this.parser.getSPS(e2,e1);
NodoDAD y=new NodoDAD(".",e,x,(e.isLambda() && x.isLambda()));
y.addNext(this.parser.listadoDeNodos);
RESULT=y;
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // values ::= X2 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // values ::= X2 specials 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
RESULT=this.parser.getSPS(e1,e);
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // X2 ::= NUMC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
Nodo x=this.parser.getND(e);
RESULT=x;
this.parser.listadoDeNodos.add(x);
this.parser.contador_____3++;
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // X2 ::= UPC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
Nodo x=this.parser.getND(e);
RESULT=x;
this.parser.listadoDeNodos.add(x);
this.parser.contador_____3++;
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // X2 ::= LWC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
Nodo x=this.parser.getND(e);
RESULT=x;
this.parser.listadoDeNodos.add(x);
this.parser.contador_____3++;
}catch(Exception ex){}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // X2 ::= CADENA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
Nodo x=new NodoVal(this.parser.contador_____3,e);
this.parser.listadoDeNodos.add(x);
this.parser.contador_____3++;
RESULT=x;
}catch(Exception ex){

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // X2 ::= ABRECOR expr CIERRACOR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // X2 ::= ABREPAREN expr CIERRAPAREN 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // specials ::= ASTERIS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specials",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // specials ::= QUESTION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specials",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // specials ::= PLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specials",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // codJava ::= java SEPARATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // codJava ::= SEPARATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // codJava ::= error SEPARATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // codJava ::= error java SEPARATOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // java ::= java terms 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("java",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // java ::= terms 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("java",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terms ::= ASTERIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // terms ::= QUESTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // terms ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // terms ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // terms ::= ABREPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // terms ::= CIERRAPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // terms ::= ABRECOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // terms ::= CIERRACOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // terms ::= ERROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // terms ::= UPC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // terms ::= LWC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // terms ::= NUMC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // terms ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // terms ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // terms ::= BOTHPOINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // terms ::= EXT_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // terms ::= VER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // terms ::= AUTHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // terms ::= EXTENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // terms ::= ABREKEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // terms ::= CIERRAKEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // terms ::= TWOPOINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // terms ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // terms ::= PNTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // terms ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // terms ::= TERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // terms ::= NO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // terms ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // terms ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // terms ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // terms ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // inicio ::= informacion 
            {
              ArrayList<dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<dato> list = (ArrayList<dato>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
try{
compararInfo(list);
RESULT=list;
}catch(Exception ex){}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inicio ::= error 
            {
              ArrayList<dato> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // informacion ::= informacion info PNTCOMA 
            {
              ArrayList<dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<dato> list = (ArrayList<dato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int objleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] obj = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
try{
list.add(new dato(objleft,objright,obj));
}catch(Exception ex){
if(list==null){
   list=new ArrayList();
}
}
RESULT=list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // informacion ::= error info 
            {
              ArrayList<dato> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // informacion ::= info PNTCOMA 
            {
              ArrayList<dato> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] e = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
ArrayList<dato> list=new ArrayList();
list.add(new dato(eleft,eright,e));
RESULT=list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // informacion ::= error PNTCOMA 
            {
              ArrayList<dato> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // informacion ::= error TWOPOINT 
            {
              ArrayList<dato> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // info ::= NAME TWOPOINT ID 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=getInfos(1,e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // info ::= VER TWOPOINT ver 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=getInfos(2,e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // info ::= AUTHOR TWOPOINT ID 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=getInfos(3,e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // info ::= EXTENS TWOPOINT ID 
            {
              Object[] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=getInfos(4,e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ver ::= NUM 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=(String.valueOf(e));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ver",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ver ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT=String.valueOf(e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ver",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
