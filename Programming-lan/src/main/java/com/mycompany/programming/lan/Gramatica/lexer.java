// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/com/mycompany/programming/lan/Gramatica/lexer.Jflex

package com.mycompany.programming.lan.Gramatica;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5, 
     1,  5,  6,  5,  7,  8,  5,  5,  9, 10, 11, 12, 13, 14, 15, 16, 
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19,  5, 20,  5, 21, 
     5, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 
    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,  5, 24,  5,  7, 
     5, 25, 26, 27, 27, 28, 27, 27, 27, 29, 27, 27, 30, 31, 32, 33, 
    27, 27, 34, 35, 36, 37, 38, 27, 39, 27, 27, 40, 41, 42,  5,  0, 
     0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  5,  7,  7,  7,  7,  5,  5,  5,  5,  7,  5,  5,  0,  5,  5, 
     5,  5,  5,  5,  5,  7,  5,  5,  5,  5,  7,  5,  5,  5,  5,  5, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  5,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  5,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\5\3\1\20\1\21\1\22\1\0"+
    "\1\23\3\0\1\24\1\0\1\2\1\0\1\25\3\0"+
    "\2\3\1\26\2\3\2\0\1\27\2\0\1\30\3\0"+
    "\5\3\4\0\1\23\2\0\1\2\3\0\5\3\1\23"+
    "\4\0\1\23\1\0\1\31\1\32\1\33\1\34\4\3"+
    "\2\0\1\3\1\35\4\3\1\36\1\3\1\37\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\54"+
    "\0\54\0\54\0\54\0\54\0\u0108\0\u0134\0\u0160\0\54"+
    "\0\54\0\54\0\u018c\0\54\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\54\0\54\0\54\0\204\0\204\0\u0294\0\u02c0"+
    "\0\u02ec\0\54\0\u0318\0\u0344\0\u0370\0\54\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u0370\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0580\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u0738\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0a24\0\u0a50\0\54\0\54\0\54\0\260\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\260\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\260\0\u0c60\0\260\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\2\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\1\25"+
    "\2\6\1\26\3\6\1\27\3\6\1\30\1\6\1\31"+
    "\1\6\1\32\1\33\1\34\57\0\1\3\51\0\6\35"+
    "\1\36\4\35\1\37\4\35\1\40\33\35\1\6\6\0"+
    "\1\6\11\0\1\6\1\41\3\0\1\6\2\0\17\6"+
    "\3\0\1\6\10\0\1\42\56\0\1\43\4\0\1\44"+
    "\52\0\1\45\1\0\1\16\54\0\1\46\52\0\1\47"+
    "\4\0\1\50\2\0\17\51\4\0\1\6\6\0\1\6"+
    "\11\0\1\6\1\41\3\0\1\6\2\0\14\6\1\52"+
    "\2\6\3\0\2\6\6\0\1\6\11\0\1\6\1\41"+
    "\3\0\1\6\2\0\16\6\1\53\3\0\2\6\6\0"+
    "\1\6\11\0\1\6\1\41\3\0\1\6\2\0\10\6"+
    "\1\54\6\6\3\0\2\6\6\0\1\6\11\0\1\6"+
    "\1\41\3\0\1\6\2\0\3\6\1\55\13\6\3\0"+
    "\2\6\6\0\1\6\11\0\1\6\1\41\3\0\1\6"+
    "\2\0\3\6\1\56\13\6\3\0\1\6\13\35\1\37"+
    "\4\35\1\0\41\35\1\36\4\35\1\57\4\35\1\60"+
    "\33\35\7\0\1\61\16\0\1\61\2\0\17\61\4\0"+
    "\13\62\1\63\40\62\2\44\1\3\1\44\1\4\47\44"+
    "\21\0\1\64\50\0\1\65\53\0\1\66\53\0\1\67"+
    "\35\0\1\6\6\0\1\6\11\0\1\6\1\41\3\0"+
    "\1\6\2\0\13\6\1\70\3\6\3\0\2\6\6\0"+
    "\1\6\11\0\1\6\1\41\3\0\1\6\2\0\13\6"+
    "\1\71\3\6\3\0\2\6\6\0\1\6\11\0\1\6"+
    "\1\41\3\0\1\6\2\0\6\6\1\72\10\6\3\0"+
    "\2\6\6\0\1\6\11\0\1\6\1\41\3\0\1\6"+
    "\2\0\11\6\1\73\5\6\3\0\2\6\6\0\1\6"+
    "\11\0\1\6\1\41\3\0\1\6\2\0\11\6\1\74"+
    "\5\6\3\0\1\6\13\75\1\76\4\75\1\77\33\75"+
    "\2\100\1\35\1\100\1\35\1\100\1\101\4\100\1\102"+
    "\4\100\1\60\33\100\1\61\6\0\1\61\11\0\1\61"+
    "\4\0\1\61\2\0\17\61\3\0\1\61\13\62\1\103"+
    "\53\62\1\103\4\62\1\104\33\62\21\0\1\105\60\0"+
    "\1\106\56\0\17\107\4\0\1\6\6\0\1\6\11\0"+
    "\1\6\1\41\3\0\1\6\2\0\10\6\1\110\6\6"+
    "\3\0\2\6\6\0\1\6\11\0\1\6\1\41\3\0"+
    "\1\6\2\0\3\6\1\111\13\6\3\0\2\6\6\0"+
    "\1\6\11\0\1\6\1\41\3\0\1\6\2\0\1\6"+
    "\1\112\15\6\3\0\2\6\6\0\1\6\11\0\1\6"+
    "\1\41\3\0\1\6\2\0\6\6\1\113\10\6\3\0"+
    "\2\6\6\0\1\6\11\0\1\6\1\41\3\0\1\6"+
    "\2\0\12\6\1\114\4\6\3\0\1\6\6\75\1\115"+
    "\4\75\1\116\4\75\1\117\46\75\1\116\40\75\13\77"+
    "\1\120\40\77\2\100\1\35\1\100\1\35\1\100\1\101"+
    "\11\100\1\60\33\100\2\121\1\75\1\121\1\75\1\121"+
    "\1\122\11\121\1\123\33\121\13\62\1\103\4\62\1\3"+
    "\33\62\30\0\1\124\53\0\1\125\53\0\1\126\23\0"+
    "\1\6\6\0\1\6\11\0\1\6\1\41\3\0\1\6"+
    "\2\0\11\6\1\127\5\6\3\0\2\6\6\0\1\6"+
    "\11\0\1\6\1\41\3\0\1\6\2\0\7\6\1\130"+
    "\7\6\3\0\2\6\6\0\1\6\11\0\1\6\1\41"+
    "\3\0\1\6\2\0\11\6\1\131\5\6\3\0\2\6"+
    "\6\0\1\6\11\0\1\6\1\41\3\0\1\6\2\0"+
    "\4\6\1\132\12\6\3\0\2\6\6\0\1\6\11\0"+
    "\1\6\1\41\3\0\1\6\2\0\4\6\1\133\12\6"+
    "\3\0\1\6\13\75\1\116\4\75\1\35\41\75\1\115"+
    "\4\75\1\134\4\75\1\123\33\75\13\77\1\120\4\77"+
    "\1\35\33\77\2\121\1\75\1\121\1\75\1\121\1\122"+
    "\4\121\1\135\4\121\1\123\35\121\1\75\1\121\1\75"+
    "\1\121\1\122\4\121\1\102\4\121\1\123\33\121\1\6"+
    "\6\0\1\6\11\0\1\6\1\41\3\0\1\6\2\0"+
    "\12\6\1\136\4\6\3\0\2\6\6\0\1\6\11\0"+
    "\1\6\1\41\3\0\1\6\2\0\3\6\1\137\13\6"+
    "\3\0\2\6\6\0\1\6\11\0\1\6\1\41\3\0"+
    "\1\6\2\0\7\6\1\140\7\6\3\0\2\6\6\0"+
    "\1\6\11\0\1\6\1\41\3\0\1\6\2\0\10\6"+
    "\1\141\6\6\3\0\1\6\13\75\1\76\40\75\2\121"+
    "\1\75\1\121\1\75\1\121\1\122\4\121\1\135\4\121"+
    "\1\60\33\121\1\6\6\0\1\6\11\0\1\6\1\41"+
    "\3\0\1\6\2\0\4\6\1\142\12\6\3\0\2\6"+
    "\6\0\1\6\11\0\1\6\1\41\3\0\1\6\2\0"+
    "\1\143\16\6\3\0\2\6\6\0\1\6\11\0\1\6"+
    "\1\41\3\0\1\6\2\0\7\6\1\144\7\6\3\0"+
    "\2\6\6\0\1\6\11\0\1\6\1\41\3\0\1\6"+
    "\2\0\10\6\1\145\6\6\3\0\2\6\6\0\1\6"+
    "\11\0\1\6\1\41\3\0\1\6\2\0\5\6\1\146"+
    "\11\6\3\0\2\6\6\0\1\6\11\0\1\6\1\41"+
    "\3\0\1\6\2\0\7\6\1\147\7\6\3\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3212];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\5\11\3\1\3\11\1\1\1\11"+
    "\5\1\3\11\1\0\1\1\3\0\1\11\1\0\1\1"+
    "\1\0\1\11\3\0\5\1\2\0\1\1\2\0\1\1"+
    "\3\0\5\1\4\0\1\1\2\0\1\1\3\0\6\1"+
    "\4\0\1\1\1\0\3\11\5\1\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.ERROR,new String(yytext()));
            }
            // fall through
          case 33: break;
          case 2:
            { 
            }
            // fall through
          case 34: break;
          case 3:
            { return symbol(sym.ID,new String(yytext()));
            }
            // fall through
          case 35: break;
          case 4:
            { return symbol(sym.ABREPAREN,new String(yytext()));
            }
            // fall through
          case 36: break;
          case 5:
            { return symbol(sym.CIERRAPAREN,new String(yytext()));
            }
            // fall through
          case 37: break;
          case 6:
            { return symbol(sym.ASTERIS,new String(yytext()));
            }
            // fall through
          case 38: break;
          case 7:
            { return symbol(sym.PLUS,new String(yytext()));
            }
            // fall through
          case 39: break;
          case 8:
            { return symbol(sym.COMA,new String(yytext()));
            }
            // fall through
          case 40: break;
          case 9:
            { return symbol(sym.NUM,new Integer(yytext()));
            }
            // fall through
          case 41: break;
          case 10:
            { return symbol(sym.TWOPOINT,new String(yytext()));
            }
            // fall through
          case 42: break;
          case 11:
            { return symbol(sym.PNTCOMA,new String(yytext()));
            }
            // fall through
          case 43: break;
          case 12:
            { return symbol(sym.IGUAL,new String(yytext()));
            }
            // fall through
          case 44: break;
          case 13:
            { return symbol(sym.QUESTION,new String(yytext()));
            }
            // fall through
          case 45: break;
          case 14:
            { return symbol(sym.ABRECOR,new String(yytext()));
            }
            // fall through
          case 46: break;
          case 15:
            { return symbol(sym.CIERRACOR,new String(yytext()));
            }
            // fall through
          case 47: break;
          case 16:
            { return symbol(sym.ABREKEY,new String(yytext()));
            }
            // fall through
          case 48: break;
          case 17:
            { return symbol(sym.OR,new String(yytext()));
            }
            // fall through
          case 49: break;
          case 18:
            { return symbol(sym.CIERRAKEY,new String(yytext()));
            }
            // fall through
          case 50: break;
          case 19:
            { return symbol(sym.CADENA,new String(yytext()));
            }
            // fall through
          case 51: break;
          case 20:
            { return symbol(sym.SEPARATOR,new String(yytext()));
            }
            // fall through
          case 52: break;
          case 21:
            { return symbol(sym.BOTHPOINT,new String(yytext()));
            }
            // fall through
          case 53: break;
          case 22:
            { return symbol(sym.NO,new String(yytext()));
            }
            // fall through
          case 54: break;
          case 23:
            { return symbol(sym.EXT_ID,new String(yytext()));
            }
            // fall through
          case 55: break;
          case 24:
            { return symbol(sym.FLOAT,new Float(yytext()));
            }
            // fall through
          case 56: break;
          case 25:
            { return symbol(sym.NUMC,new String(yytext()));
            }
            // fall through
          case 57: break;
          case 26:
            { return symbol(sym.UPC,new String(yytext()));
            }
            // fall through
          case 58: break;
          case 27:
            { return symbol(sym.LWC,new String(yytext()));
            }
            // fall through
          case 59: break;
          case 28:
            { return symbol(sym.AUTHOR,new String(yytext()));
            }
            // fall through
          case 60: break;
          case 29:
            { return symbol(sym.NAME,new String(yytext()));
            }
            // fall through
          case 61: break;
          case 30:
            { return symbol(sym.VER,new String(yytext()));
            }
            // fall through
          case 62: break;
          case 31:
            { return symbol(sym.TERM,new String(yytext()));
            }
            // fall through
          case 63: break;
          case 32:
            { return symbol(sym.EXTENS,new String(yytext()));
            }
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " char:" + yychar + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
